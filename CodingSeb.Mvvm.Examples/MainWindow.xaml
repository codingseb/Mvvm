<Window x:Class="CodingSeb.Mvvm.Examples.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CodingSeb.Mvvm.Examples"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        DataContext="{x:Static local:MainViewModel.Instance}"
        Title="MainWindow" Height="450" Width="800">
    <Window.Resources>
        <sys:Boolean x:Key="TrueBool">True</sys:Boolean>
        <sys:Boolean x:Key="FalseBool">False</sys:Boolean>
        <sys:String x:Key="ResOnWindow">Resource in Window</sys:String>
        
        <Style TargetType="TextBox">
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        
    </Window.Resources>
    <StackPanelEx Tag="GrandParent">
        <StackPanelEx.Resources>
            <sys:String x:Key="ResOnGrandParent">Resource in GrandParent</sys:String>
        </StackPanelEx.Resources>
        <AutoGrid Columns="Auto,*,Auto,Auto" >
            <Label Content="#TextBox1" />
            <TextBox x:Name="TextBox1" Grid.ColumnSpan="3" />
            <Label Content="Value1" />
            <TextBox Text="{Binding Value1, UpdateSourceTrigger=PropertyChanged}" />
            <Button Content="Increment (Click to command)" Click="{XCommand IncrementValue1Command, TestCanExecute}"
                    VerticalAlignment="Center"/>
            <Button Content="Decrement (Click to method)" Click="{XCommand DecrementValue1, TestCanExecute}"
                    VerticalAlignment="Center"/>
            <Label Content="Value2" />
            <TextBox Text="{Binding Value2, UpdateSourceTrigger=PropertyChanged}" />
            <Button Content="Increment (Command to command)" Command="{XCommand IncrementValue2Command, TestCanExecute}"
                        VerticalAlignment="Center"/>
            <Button Content="Decrement (Command to method)" Command="{XCommand DecrementValue2, TestCanExecute}"
                        VerticalAlignment="Center"/>
            <Label Content="XCommandExpression" />
            <TextBox x:Name="XCommandExpressionTextBox" 
                     Text="MessageBox.Show(&quot;Hello&quot;)"/>
            <Button Content="Click to Expression" Click="{XCommand ScriptEvaluate(#XCommandExpressionTextBox.Text), '#CheckBox1.IsChecked and TestCanExecute or #CheckBox5.IsChecked', CatchEvaluationExceptions=True}"
                    VerticalAlignment="Center"/>
            <Button Content="Command to Expression" Command="{XCommand ScriptEvaluate(#XCommandExpressionTextBox.Text)}"
                    VerticalAlignment="Center"/>
            <Label Content="ExpressionTextBox" />
            <TextBox x:Name="ExpressionTextBox" 
                     Text="$parent[StackPanelEx]"
                     Grid.ColumnSpan="3"/>
        </AutoGrid>
        <DockPanel>
            <Button Content="XCommand on Method with args"
                    DockPanel.Dock="Right"
                    Click="{XCommand ClickTest, CommandParameterBinding={Binding Text, ElementName=TextBox1}}" />
            <TextBlock Text="{Eval '(Value1 + Value2).ToString()'}" />
        </DockPanel>
        <TextBlock Text="{Eval '((double)(#TextBox1.Text) + Value2).ToString()'}" />
        <TextBlock Text="{Eval '((double)(#TextBox1.Text) + Value2).ToString()', FallbackValue='Failed'}" />
        <TextBlock Text="{Eval 'ScriptEvaluate(#ExpressionTextBox.Text).ToString()', FallbackValue='Evaluation failed', AutoBinding=AutoBindingAtEachEvaluation}" />
        <Grid Tag="InterGrid" Background="{Eval {Binding Text, ElementName=ExpressionTextBox}, FallbackValue=White}">
            <StackPanelEx Tag="Parent" Orientation="Horizontal" MarginBetweenChildren="10" >
                <StackPanelEx.Resources>
                    <sys:String x:Key="ResOnParent">Resource in Parent</sys:String>
                </StackPanelEx.Resources>
                <TextBlock Tag="Self" Text="{Eval $self.Tag}" />
                <TextBlock Text="{Eval $parent.Tag}" />
                <TextBlock Text="{Eval $parent[StackPanelEx].Tag}" />
                <TextBlock Text="{Eval '$parent[StackPanelEx,1].Tag'}" />
                <TextBlock Text="{Eval '$parent[StackPanelEx,2].Tag'}" />
                <TextBlock Text="{Eval $parent[1].Tag}" />
                <TextBlock Text="{Eval $parent[2].Tag}" />
                <TextBlock Text="{Eval $parent[3].Tag}" />
                <TextBlock Text="{Eval @ResOnParent}" />
                <TextBlock Text="{Eval @ResOnWindow}" />
                <TextBlock Text="{Eval {Binding Text, ElementName=ExpressionTextBox}, FallbackValue='Evaluation failed'}" />
            </StackPanelEx>
        </Grid>
        <StackPanelEx Orientation="Horizontal" MarginBetweenChildren="10" >
            <CheckBox Content="1" x:Name="CheckBox1" />
            <CheckBox Content="2" x:Name="CheckBox2" />
            <CheckBox Content="3" x:Name="CheckBox3" />
            <CheckBox Content="4" x:Name="CheckBox4" />
            <CheckBox Content="5" x:Name="CheckBox5" />
        </StackPanelEx>
        <CheckBox IsEnabled="False"
                  Content="(1 and not 2) or (3 and 4) or 5"
                  IsChecked="{XMultiBinding 
                    {XMultiBinding {Binding IsChecked, ElementName=CheckBox1}, {Binding IsChecked, ElementName=CheckBox2, Converter={BoolReverseConverter}} , Converter={BoolMultiBindingAndConditionConverter}},
                    {XMultiBinding {Binding IsChecked, ElementName=CheckBox3}, {Binding IsChecked, ElementName=CheckBox4}, Converter={BoolMultiBindingAndConditionConverter}}, 
                    {Binding IsChecked, ElementName=CheckBox5}, 
                    Converter={BoolMultiBindingOrConditionConverter}}"/>
        <CheckBox IsEnabled="False"
                  Content="(1 and (2 or not 3)) or (4 and 5)"
                  IsChecked="{XMultiBinding 
                    {XMultiBinding {Binding IsChecked, ElementName=CheckBox1}, 
                      {XMultiBinding {Binding IsChecked, ElementName=CheckBox2}, {Binding IsChecked, ElementName=CheckBox3, Converter={BoolReverseConverter}}, Converter={BoolMultiBindingOrConditionConverter}} , 
                      Converter={BoolMultiBindingAndConditionConverter}}, 
                    {XMultiBinding {Binding IsChecked, ElementName=CheckBox4}, {Binding IsChecked, ElementName=CheckBox5}, Converter={BoolMultiBindingAndConditionConverter}}, 
                    Converter={BoolMultiBindingOrConditionConverter} }"/>
        <CheckBox IsEnabled="False"
                  Content="1 and TrueBool in resources"
                  IsChecked="{XMultiBinding {Binding IsChecked, ElementName=CheckBox1}, {Binding Source={StaticResource TrueBool}, Mode=OneWay}, Converter={BoolMultiBindingAndConditionConverter}}"/>
        <CheckBox IsEnabled="False"
                  Content="1 or FalseBool in resources"
                  IsChecked="{XMultiBinding {Binding IsChecked, ElementName=CheckBox1}, {Binding Source={StaticResource FalseBool}, Mode=OneWay}, Converter={BoolMultiBindingOrConditionConverter}}"/>
        <CheckBox IsEnabled="False"
                 Content="1 and Eval"
                 IsChecked="{XMultiBinding {Binding IsChecked, ElementName=CheckBox1}, {Eval '2 > 1'}, Converter={BoolMultiBindingAndConditionConverter}}"/>
        <TextBlock Text="{XMultiBinding {Binding IsChecked, ElementName=CheckBox1}, {Eval '2 > 1'}, Converter={BoolMultiBindingAndConditionConverter}}"
                   Visibility="{Eval {Binding Text, ElementName=ExpressionTextBox}, FallbackValue=Visible}"/>
        <CheckBox IsEnabled="False"
                  IsChecked="{Eval {Binding Text, ElementName=ExpressionTextBox}}" />
    </StackPanelEx>
</Window>
